from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from db.models import TableUser
from db.dbutils import add_user_to_db
from loader import dp
from states.form import Form
import logging
logging.basicConfig(level="INFO")


@dp.message_handler(Command("keywords"))
async def enter_form(message: types.Message):
    msg = """
    –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    await message.answer(msg)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n")
    await Form.Q1.set()


@dp.message_handler(state = Form.Q1)
async def answer_q1(message: types.Message, state: FSMContext):

    await state.update_data(title_kw = message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏\n")
    await Form.next()

@dp.message_handler(state=Form.Q2)
async def answer_q2(message: types.Message, state: FSMContext):

    await state.update_data(desc_kw = message.text)
    data = await state.get_data()
    rec = TableUser(
        user_id = str(message.from_user.id),
        user_name = message.from_user.full_name,
        user_title_keywords = data.get('title_kw'),
        user_desc_keywords = data.get('desc_kw'),
        user_email = "email"
    )

    add_user_to_db(rec)
    await message.answer("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! ")
    await message.answer("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üëâ /get_vacancies")
    await state.reset_state()



